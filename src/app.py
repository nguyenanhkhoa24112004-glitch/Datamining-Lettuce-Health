import streamlit as st
import torch
from PIL import Image
import os

# Import c√°c h√†m ti·ªÅn x·ª≠ l√Ω t·ª´ module c·ª•c b·ªô
from preprocessing import test_transforms 

# --- C·∫§U H√åNH V√Ä T·∫¢I MODEL ---

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn model ƒë√£ hu·∫•n luy·ªán
MODEL_PATH = os.path.join(os.path.dirname(__file__), '..', 'models', 'ResnetModel_PlantHealthy (1).pth')

# X√°c ƒë·ªãnh thi·∫øt b·ªã
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# T√™n 2 l·ªõp
class_names = ['kh·ªèe m·∫°nh', 'kh√¥ng kh·ªèe m·∫°nh'] 

@st.cache_resource
def load_model():
    """
    T·∫£i model ƒë√£ hu·∫•n luy·ªán t·ª´ file .pth (d·∫°ng TorchScript).
    """
    # T·∫£i to√†n b·ªô model ƒë√£ l∆∞u (ƒë√£ s·ª≠a l·ªói TypeError)
    model = torch.jit.load(MODEL_PATH, map_location=device)
    model.to(device)
    model.eval() # Chuy·ªÉn sang ch·∫ø ƒë·ªô ƒë√°nh gi√°
    return model

def predict(image):
    """
    H√†m nh·∫≠n ·∫£nh PIL, ti·ªÅn x·ª≠ l√Ω v√† tr·∫£ v·ªÅ d·ª± ƒëo√°n
    """
    # Ti·ªÅn x·ª≠ l√Ω ·∫£nh (d√πng h√†m import t·ª´ preprocessing.py)
    img_tensor = test_transforms(image).unsqueeze(0).to(device)
    
    # D·ª± ƒëo√°n
    with torch.no_grad():
        outputs = model(img_tensor)
        _, preds = torch.max(outputs, 1)
        label_idx = preds.item()
        label = class_names[label_idx]
    return label

# T·∫£i model
model = load_model()

# --- GIAO DI·ªÜN WEB STREAMLIT ---

st.set_page_config(page_title="Lettuce Knight", page_icon="ü•¨", layout="wide")

# CSS t√πy ch·ªânh ƒë·ªÉ c·∫£i thi·ªán giao di·ªán
st.markdown("""
    <style>
    .main {
        background-color: #f5f5ff; /* M√†u n·ªÅn x√°m nh·∫°t */
    }
    /* Style cho khung t·∫£i ·∫£nh */
    [data-testid="stFileUploader"] {
        border: 2px dashed #4CAF50;
        border-radius: 10px;
        padding: 25px;
        background-color: #FAFAFA;
    }
    [data-testid="stFileUploader"] > label {
        color: #4CAF50;
        font-size: 1.2em;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)

st.title("ü•¨ Lettuce Knight - Hi·ªáp sƒ© X√† l√°ch")
st.write("---")
st.markdown("**Ch√†o m·ª´ng!** T·∫£i l√™n m·ªôt h√¨nh ·∫£nh c·ªßa c√¢y rau x√† l√°ch ƒë·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa c√¢y.")

# --- PH·∫¶N T·∫¢I ·∫¢NH L√äN ---
uploaded_file = st.file_uploader("Ch·ªçn m·ªôt h√¨nh ·∫£nh (JPG, PNG, JPEG)...", type=["jpg", "png", "jpeg"], label_visibility="collapsed")

st.write("---")

# Hi·ªÉn th·ªã k·∫øt qu·∫£
if uploaded_file is not None:
    try:
        image = Image.open(uploaded_file).convert('RGB')
        
        # Chia 2 c·ªôt cho k·∫øt qu·∫£
        col1, col2 = st.columns(2)
        
        with col1:
            st.image(image, caption='·∫¢nh ƒë√£ t·∫£i l√™n.', use_column_width=True)

        with col2:
            with st.spinner('ƒêang ph√¢n t√≠ch...'):
                label = predict(image)
    
            st.subheader("K·∫øt qu·∫£ ph√¢n t√≠ch:")
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ v√† g·ª£i √Ω gi·∫£i ph√°p
            if label == "kh√¥ng kh·ªèe m·∫°nh":
                st.warning(f"‚ö†Ô∏è **C·∫£nh b√°o:** Rau c√≥ d·∫•u hi·ªáu b·ªã stress!")
                st.markdown(
                    """
                    **G·ª£i √Ω gi·∫£i ph√°p:**
                    - **Ki·ªÉm tra s√¢u b·ªánh:** T√¨m ki·∫øm d·∫•u hi·ªáu c·ªßa s√¢u, r·ªáp, ho·∫∑c n·∫•m.
                    - **T∆∞·ªõi n∆∞·ªõc:** ƒê·∫£m b·∫£o c√¢y ƒë∆∞·ª£c cung c·∫•p ƒë·ªß n∆∞·ªõc, tr√°nh √∫ng ho·∫∑c kh√¥ h·∫°n.
                    - **Dinh d∆∞·ª°ng:** B·ªï sung ph√¢n b√≥n h·ªØu c∆° ho·∫∑c vi l∆∞·ª£ng.
                    - **√Ånh s√°ng:** ƒê·∫£m b·∫£o c√¢y nh·∫≠n ƒë·ªß √°nh s√°ng m·∫∑t tr·ªùi.
                    """
                )
            else:
                st.balloons()
                st.success(f"‚úÖ **Tuy·ªát v·ªùi!** Rau c·ªßa b·∫°n ƒëang ph√°t tri·ªÉn kh·ªèe m·∫°nh. H√£y ti·∫øp t·ª•c chƒÉm s√≥c t·ªët nh√©!")

    except Exception as e:
        st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ·∫£nh: {e}")
